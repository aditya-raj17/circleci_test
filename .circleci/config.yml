version: 2.1

jobs:
  build:
    docker:
      - image: adityablitz/flutter-3.24.2:latest

    steps:
      - checkout
      
      # Restore combined cache for Flutter and Gradle dependencies
      - restore_cache:
          keys:
            - flutter-deps-v1-{{ checksum "pubspec.lock" }}
            - flutter-deps-v1-
            
      - run:
          name: "Creating Env file"
          command: |
            if [[ "${CIRCLE_BRANCH}" == "main" ]]; then
              echo "Creating .env file for production environment"
              cat > .env \<< EOF
            REALM=${REALM_PRD}
            EOF
              echo "Environment file created:"
              cat .env
            else
              echo "Branch not configured for builds"
              exit 1
            fi

      - run:
          name: Clean Flutter Build
          command: flutter clean
          
      - run:
          name: "Install dependencies"
          command: flutter pub get

      - run:
          name: Install Shorebird CLI
          command: |
            if [[ "${CIRCLE_BRANCH}" == "main" ]]; then
              echo "Installing Shorebird CLI for production branch..."
              curl --proto '=https' --tlsv1.2 https://raw.githubusercontent.com/shorebirdtech/install/main/install.sh -sSf | bash
              echo 'export PATH="$HOME/.shorebird/bin:$PATH"' >> $BASH_ENV
              source $BASH_ENV
            else
              echo "Skipping Shorebird installation for non-production branch"
            fi

      - run:
          name: Set Shorebird token
          command: |
            if [[ "${CIRCLE_BRANCH}" == "main" ]]; then
              export SHOREBIRD_TOKEN="$SHOREBIRD_TOKEN"
              echo "Shorebird token set"
            fi
      
      - run:
          name: Shorebird Intelligent Deploy (Patch or Release)
          command: |
            #!/bin/bash
            timeout -s KILL 40s bash <<'EOF'
            set -e # Exit immediately if a command exits with a non-zero status.

            # Redirect all output to shorebird_deploy.log while also displaying on console
            exec > >(tee -a shorebird_deploy.log) 2>&1

            # Step 1: Select the correct Shorebird App ID based on the branch.
            if [[ "${CIRCLE_BRANCH}" == "main" ]]; then
              SHOREBIRD_APP_ID=$SHOREBIRD_APP_ID_PROD
            elif [[ "${CIRCLE_BRANCH}" == "stag-main" || "${CIRCLE_BRANCH}" == "pre-prod-main" ]]; then
              SHOREBIRD_APP_ID=$SHOREBIRD_APP_ID_STAG
            else
              SHOREBIRD_APP_ID=$SHOREBIRD_APP_ID_DEV
            fi
            
            if [ -z "$SHOREBIRD_APP_ID" ]; then
              echo "‚ùå ERROR: Shorebird App ID for branch ${CIRCLE_BRANCH} is not set."
              exit 1
            fi
            
            echo "üéØ Using Shorebird App ID: ${SHOREBIRD_APP_ID} for branch ${CIRCLE_BRANCH}"
            echo "app_id: $SHOREBIRD_APP_ID" > shorebird.yaml
            echo "auto_update: false" >> shorebird.yaml
            echo "Generated shorebird.yaml:"
            cat shorebird.yaml

            # Step 2: Get version from pubspec.yaml
            VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}')
            echo "üîé Current app version is $VERSION"

            # Step 3: Always attempt to patch first.
            echo -e "\n‚è≥ Attempting to patch release $VERSION..."
            PATCH_OUTPUT=$(shorebird patch android --release-version="$VERSION" --no-confirm || true)

            # Step 4: Analyze the patch command's output
            if echo "$PATCH_OUTPUT" | grep -q "‚úÖ Published Patch"; then
              # CASE 1: Patch successful. Job is done.
              echo "‚úÖ Successfully published patch for version $VERSION."
              echo "patch" > /tmp/deployment_type.txt # Create flag file for Slack notification
              exit 0

            elif echo "$PATCH_OUTPUT" | grep -q "Release not found"; then
              # CASE 2: Release does not exist. Attempt to create it.
              echo -e "\n‚ÑπÔ∏è No existing release found for $VERSION. Attempting to create a new release..."
              RELEASE_OUTPUT=$(shorebird release android --flutter-version=3.24.2 --no-confirm || true)

              # Step 5: Analyze the release command's output
              if echo "$RELEASE_OUTPUT" | grep -q "‚úÖ Published Release"; then
                # CASE 2a: Release successful. Trigger Fastlane deployment.
                echo "‚úÖ Successfully published new release for version $VERSION."
                # echo "üöÄ Preparing to upload AAB to Play Store..."
                # echo "release" > /tmp/deployment_type.txt # Create flag file for Slack notification

                # # --- START: Conditional Fastlane Deployment ---
                # mkdir -p fastlane
                # if [[ "${CIRCLE_BRANCH}" == "prod-main" ]]; then
                #   echo "Configuring Fastlane for Production deployment"
                #   printf '%s\n' \
                #     "default_platform(:android)" \
                #     "" \
                #     "platform :android do" \
                #     "  desc 'Deploy to Google Play Store Production'" \
                #     "  lane :production do" \
                #     "    upload_to_play_store(json_key: 'google-play-key.json', package_name: ENV['ANDROID_PACKAGE_NAME'], aab: 'build/app/outputs/bundle/release/app-release.aab', track: 'production', release_status: 'draft', skip_upload_metadata: true, skip_upload_images: true, skip_upload_screenshots: true)" \
                #     "  end" \
                #     "end" > fastlane/Fastfile
                #   fastlane android production
                # else
                #   echo "Configuring Fastlane for Internal App Sharing"
                #   printf '%s\n' \
                #     "default_platform(:android)" \
                #     "" \
                #     "platform :android do" \
                #     "  desc 'Upload to Internal App Sharing'" \
                #     "  lane :internal_sharing do" \
                #     "    result = upload_to_play_store_internal_app_sharing(json_key: 'google-play-key.json', package_name: ENV['ANDROID_PACKAGE_NAME'], aab: 'build/app/outputs/bundle/release/app-release.aab')" \
                #     "    File.write(\"../sharing_url.txt\", result) if result && result.start_with?('https')" \
                #     "  end" \
                #     "end" > fastlane/Fastfile
                #   fastlane android internal_sharing
                # fi
                # # --- END: Conditional Fastlane Deployment ---

                exit 0
              
              elif echo "$RELEASE_OUTPUT" | grep -q "existing android release for version"; then
                echo -e "\n‚ùå ERROR: Shorebird reports an existing release, but patching failed."
                echo "Please check the Shorebird console or bump your app version."
                exit 1
              else
                echo -e "\n‚ùå ERROR: An unexpected error occurred during release creation."
                echo "$RELEASE_OUTPUT"
                exit 1
              fi
            else
              echo -e "\n‚ùå ERROR: An unexpected error occurred during patch attempt."
              echo "$PATCH_OUTPUT"
              exit 1
            fi

      # Save combined cache for both Flutter and Gradle dependencies
      - save_cache:
          paths:
            - ~/.pub-cache
            - ~/.gradle
          key: flutter-deps-v1-{{ checksum "pubspec.lock" }}

      - run:
          name: Store Shorebird deploy logs
          command: |
            if [ -f shorebird_deploy.log ]; then
              circleci-agent store_artifacts shorebird_deploy.log shorebird-logs
              echo "Shorebird deploy logs stored successfully"
            else
              echo "No shorebird_deploy.log file found to store"
            fi

      - store_artifacts:
          path: build/app/outputs/bundle/release/app-release.aab
          destination: release-aab
          # Note: For Shorebird builds, artifacts may be in different locations

workflows:
  say-hello-workflow:
    jobs:
      - build