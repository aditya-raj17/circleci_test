version: 2.1

jobs:
  build:
    docker:
      - image: adityablitz/flutter-3.24.2:latest

    steps:
      - checkout
      
      # Restore combined cache for Flutter and Gradle dependencies
      - restore_cache:
          keys:
            - flutter-deps-v1-{{ checksum "pubspec.lock" }}
            - flutter-deps-v1-
            
      - run:
          name: "Creating Env file"
          command: |
            if [[ "${CIRCLE_BRANCH}" == "main" ]]; then
              echo "Creating .env file for production environment"
              cat > .env \<< EOF
            REALM=${REALM_PRD}
            EOF
              echo "Environment file created:"
              cat .env
            else
              echo "Branch not configured for builds"
              exit 1
            fi

      - run:
          name: Clean Flutter Build
          command: flutter clean
          
      - run:
          name: "Install dependencies"
          command: flutter pub get

      - run:
          name: Install Shorebird CLI
          command: |
            if [[ "${CIRCLE_BRANCH}" == "main" ]]; then
              echo "Installing Shorebird CLI for production branch..."
              curl --proto '=https' --tlsv1.2 https://raw.githubusercontent.com/shorebirdtech/install/main/install.sh -sSf | bash
              echo 'export PATH="$HOME/.shorebird/bin:$PATH"' >> $BASH_ENV
              source $BASH_ENV
            else
              echo "Skipping Shorebird installation for non-production branch"
            fi

      - run:
          name: Set Shorebird token
          command: |
            if [[ "${CIRCLE_BRANCH}" == "main" ]]; then
              export SHOREBIRD_TOKEN="$SHOREBIRD_TOKEN"
              echo "Shorebird token set"
            fi
      
      - run:
          name: Shorebird Intelligent Deploy (Patch or Release)
          no_output_timeout: 20m
          command: |
            #!/bin/bash
            set -e # Exit immediately if a command exits with a non-zero status.
            
            # Create log file for Shorebird operations
            SHOREBIRD_LOG="shorebird_deploy.log"
            echo "üöÄ Starting Shorebird Intelligent Deploy - $(date)" | tee -a "$SHOREBIRD_LOG"
            
            # Deliberately exit to test artifact saving
            echo "üß™ Deliberately exiting for testing artifact saving..." | tee -a "$SHOREBIRD_LOG"
            echo "üìù Log file created at: $(pwd)/$SHOREBIRD_LOG" | tee -a "$SHOREBIRD_LOG"
            echo "üìä Log file size: $(wc -c < "$SHOREBIRD_LOG" 2>/dev/null || echo '0') bytes" | tee -a "$SHOREBIRD_LOG"
            exit 1
            
            # Set up 60-second timeout mechanism
            BUILD_START_TIME=$(date +%s)
            (while true; do 
              BUILD_DURATION=$(( $(date +%s) - BUILD_START_TIME ))
              if [ $BUILD_DURATION -gt 60 ]; then
                echo "‚ùå ERROR: Shorebird build timed out after 60 seconds." | tee -a "$SHOREBIRD_LOG"
                echo "üïê Build duration: ${BUILD_DURATION} seconds" | tee -a "$SHOREBIRD_LOG"
                echo "üíÄ Killing entire bash process due to timeout" | tee -a "$SHOREBIRD_LOG"
                # Kill the entire process group (including the main bash process)
                kill -TERM -$$ 2>/dev/null || true
                sleep 2
                kill -KILL -$$ 2>/dev/null || true
                exit 1
              fi
              echo "‚è≥ Still working... $(date +%H:%M:%S) (${BUILD_DURATION}s elapsed)" | tee -a "$SHOREBIRD_LOG"
              # Simplified resource monitoring (less overhead)
              echo "üìä Load: $(cat /proc/loadavg | cut -d' ' -f1-3 2>/dev/null || echo 'N/A')" | tee -a "$SHOREBIRD_LOG"
              sleep 10
            done) &
            KEEPALIVE_PID=$!

            # Step 1: Select the correct Shorebird App ID based on the branch.
            if [[ "${CIRCLE_BRANCH}" == "main" ]]; then
              SHOREBIRD_APP_ID=$SHOREBIRD_APP_ID_PROD
            elif [[ "${CIRCLE_BRANCH}" == "pre-prod-main" ]]; then
              SHOREBIRD_APP_ID=$SHOREBIRD_APP_ID_PRE_PROD
            elif [[ "${CIRCLE_BRANCH}" == "stag-main" ]]; then
              SHOREBIRD_APP_ID=$SHOREBIRD_APP_ID_STAG
            else 
              SHOREBIRD_APP_ID=$SHOREBIRD_APP_ID_DEV
            fi
            
            if [ -z "$SHOREBIRD_APP_ID" ]; then
              echo "‚ùå ERROR: Shorebird App ID for branch ${CIRCLE_BRANCH} is not set."
              exit 1
            fi
            
            echo "üéØ Using Shorebird App ID: ${SHOREBIRD_APP_ID} for branch ${CIRCLE_BRANCH}" | tee -a "$SHOREBIRD_LOG"
            echo "app_id: $SHOREBIRD_APP_ID" > shorebird.yaml
            echo "auto_update: false" >> shorebird.yaml
            echo "Generated shorebird.yaml:" | tee -a "$SHOREBIRD_LOG"
            cat shorebird.yaml | tee -a "$SHOREBIRD_LOG"

            # Step 2: Get version from pubspec.yaml
            VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}')
            echo "export VERSION='$VERSION'" >> $BASH_ENV
            echo "üîé Current app version is $VERSION" | tee -a "$SHOREBIRD_LOG"
            
            # Network connectivity check
            echo "üåê Checking network connectivity..." | tee -a "$SHOREBIRD_LOG"
            curl -s --connect-timeout 5 https://api.shorebird.dev/health > /dev/null && echo "‚úÖ Shorebird API reachable" | tee -a "$SHOREBIRD_LOG" || echo "‚ö†Ô∏è Shorebird API unreachable" | tee -a "$SHOREBIRD_LOG"

            # Step 3: Always attempt to patch first.
            echo -e "\n‚è≥ Attempting to patch release $VERSION..." | tee -a "$SHOREBIRD_LOG"
            echo "üïê Patch start time: $(date)" | tee -a "$SHOREBIRD_LOG"
            PATCH_START_TIME=$(date +%s)
            PATCH_OUTPUT=$(shorebird patch android --release-version="$VERSION" --no-confirm 2>&1 | tee -a "$SHOREBIRD_LOG" || true)
            PATCH_END_TIME=$(date +%s)
            PATCH_DURATION=$((PATCH_END_TIME - PATCH_START_TIME))
            echo "‚è±Ô∏è Patch attempt took: ${PATCH_DURATION} seconds" | tee -a "$SHOREBIRD_LOG"

            # Step 4: Analyze the patch command's output
            if echo "$PATCH_OUTPUT" | grep -q "‚úÖ Published Patch"; then
              # CASE 1: Patch successful. Job is done.
              PATCH_NUMBER=$(echo "$PATCH_OUTPUT" | grep -o "‚úÖ Published Patch [0-9]*" | grep -o "[0-9]*" || echo "")
              echo "export PATCH_NUMBER='$PATCH_NUMBER'" >> $BASH_ENV
              echo "‚úÖ Successfully published patch $PATCH_NUMBER for version $VERSION." | tee -a "$SHOREBIRD_LOG"
              echo "export DEPLOYMENT_TYPE=1" >> $BASH_ENV
              echo "üéâ Shorebird deployment completed successfully - $(date)" | tee -a "$SHOREBIRD_LOG"
              exit 0

            elif echo "$PATCH_OUTPUT" | grep -q "Release not found"; then
              # CASE 2: Release does not exist. Attempt to create it.
              echo -e "\n‚ÑπÔ∏è No existing release found for $VERSION. Attempting to create a new release..." | tee -a "$SHOREBIRD_LOG"
              echo "üïê Release start time: $(date)" | tee -a "$SHOREBIRD_LOG"
              RELEASE_START_TIME=$(date +%s)
              RELEASE_OUTPUT=$(shorebird release android --flutter-version=3.24.2 --no-confirm 2>&1 | tee -a "$SHOREBIRD_LOG" || true)
              RELEASE_END_TIME=$(date +%s)
              RELEASE_DURATION=$((RELEASE_END_TIME - RELEASE_START_TIME))
              echo "‚è±Ô∏è Release creation took: ${RELEASE_DURATION} seconds" | tee -a "$SHOREBIRD_LOG"

              # Step 5: Analyze the release command's output
              if echo "$RELEASE_OUTPUT" | grep -q "‚úÖ Published Release"; then
                # CASE 2a: Release successful. Trigger Fastlane deployment.
                echo "‚úÖ Successfully published new release for version $VERSION." | tee -a "$SHOREBIRD_LOG"
                echo "üöÄ Preparing to upload AAB to Play Store..." | tee -a "$SHOREBIRD_LOG"
                echo "export DEPLOYMENT_TYPE=0" >> $BASH_ENV

                # --- START: Conditional Fastlane Deployment ---
                mkdir -p fastlane
                if [[ "${CIRCLE_BRANCH}" == "prod-main" ]]; then
                  echo "Configuring Fastlane for Production deployment"
                  printf '%s\n' \
                    "default_platform(:android)" \
                    "" \
                    "platform :android do" \
                    "  desc 'Deploy to Google Play Store Production'" \
                    "  lane :production do" \
                    "    upload_to_play_store(json_key: 'google-play-key.json', package_name: ENV['ANDROID_PACKAGE_NAME'], aab: 'build/app/outputs/bundle/release/app-release.aab', track: 'production', release_status: 'draft', skip_upload_metadata: true, skip_upload_images: true, skip_upload_screenshots: true)" \
                    "  end" \
                    "end" > fastlane/Fastfile
                  fastlane android production
                else
                  echo "Configuring Fastlane for Internal App Sharing"
                  printf '%s\n' \
                    "default_platform(:android)" \
                    "" \
                    "platform :android do" \
                    "  desc 'Upload to Internal App Sharing'" \
                    "  lane :internal_sharing do" \
                    "    result = upload_to_play_store_internal_app_sharing(json_key: 'google-play-key.json', package_name: ENV['ANDROID_PACKAGE_NAME'], aab: 'build/app/outputs/bundle/release/app-release.aab')" \
                    "    File.write(\"../sharing_url.txt\", result) if result && result.start_with?('https')" \
                    "  end" \
                    "end" > fastlane/Fastfile
                  fastlane android internal_sharing
                fi
                # --- END: Conditional Fastlane Deployment ---
                echo "üéâ Shorebird release completed successfully - $(date)" | tee -a "$SHOREBIRD_LOG"
                exit 0
              elif echo "$RELEASE_OUTPUT" | grep -q "existing android release for version"; then
                echo -e "\n‚ùå ERROR: Shorebird reports an existing release, but patching failed." | tee -a "$SHOREBIRD_LOG"
                echo "Please check the Shorebird console or bump your app version." | tee -a "$SHOREBIRD_LOG"
                echo "üíæ Saving Shorebird log as artifact due to error"
                kill $KEEPALIVE_PID 2>/dev/null || true
                exit 1
              else
                echo -e "\n‚ùå ERROR: An unexpected error occurred during release creation." | tee -a "$SHOREBIRD_LOG"
                echo "$RELEASE_OUTPUT" | tee -a "$SHOREBIRD_LOG"
                echo "üíæ Saving Shorebird log as artifact due to error"
                kill $KEEPALIVE_PID 2>/dev/null || true
                exit 1
              fi
            else
              echo -e "\n‚ùå ERROR: An unexpected error occurred during patch attempt." | tee -a "$SHOREBIRD_LOG"
              echo "$PATCH_OUTPUT" | tee -a "$SHOREBIRD_LOG"
              echo "üíæ Saving Shorebird log as artifact due to error"
              kill $KEEPALIVE_PID 2>/dev/null || true
              exit 1
            fi
            
            # Clean up keepalive process
            kill $KEEPALIVE_PID 2>/dev/null || true

      - run:
          name: Store Shorebird logs on failure
          when: on_fail
          command: |
            echo "üîç Shorebird step failed - checking for log file..."
            echo "üìÅ Current directory: $(pwd)"
            echo "üìã Directory contents:"
            ls -la
            
            if [ -f "shorebird_deploy.log" ]; then
              echo "‚úÖ Found shorebird_deploy.log"
              echo "üìä Log file size: $(wc -c < shorebird_deploy.log) bytes"
              echo "üìÑ First few lines of log:"
              head -5 shorebird_deploy.log
              echo "üîÑ Storing artifact for debugging..."
              # Copy to a location that will be stored as artifact
              cp shorebird_deploy.log ./shorebird_failure_log.log
              echo "‚úÖ Log file prepared for artifact storage"
            else
              echo "‚ùå shorebird_deploy.log not found"
              echo "üîç Looking for any .log files:"
              find . -name "*.log" -type f 2>/dev/null || echo "No .log files found"
              echo "üîç Looking for files containing 'shorebird':"
              find . -name "*shorebird*" -type f 2>/dev/null || echo "No shorebird files found"
            fi

      - store_artifacts:
          path: shorebird_failure_log.log
          destination: shorebird-failure-logs

      # Save combined cache for both Flutter and Gradle dependencies
      - save_cache:
          paths:
            - ~/.pub-cache
            - ~/.gradle
          key: flutter-deps-v1-{{ checksum "pubspec.lock" }}
          when: always


      - store_artifacts:
          path: build/app/outputs/bundle/release/app-release.aab
          destination: release-aab
          when: always
          # Note: For Shorebird builds, artifacts may be in different locations

workflows:
  say-hello-workflow:
    jobs:
      - build